classdef channel_t < handle
    
    properties
        
        verbosity;
        verbosity_cp;           % Cyclic prefix in samples (oversampling must be included).
                                % Only used if verbosity is set to a value above 0 and channel is rayleigh/rician.
                                % Very useful for debugging to see if channel response is longer than cyclic prefix.
                                % Otherwise it can be easily missed that the channel response is longer than the CP.
        type;                   % awgn, rayleigh, rician
        
        % variables used by all channel types
        N_TX;                   % number of transmit antennas
        N_RX;                   % number of receive antennas
        spectrum_occupied;      % share of spectrum occupied

        amp;                    % amplitude as linear factor, can be linked to large-scale pathloss
        sto_integer;            % symbol timing offset in samples, must be >= 0
        sto_fractional;         % symbol timing offset
        cfo;                    % carrier frequency offset in Hertz
        err_phase;              % error phase in radians
        snr_db;                 % in-band (i.e. occupied spectrum) signal-to-noise-ratio in dB

        % prefix r_ for rayleigh and rician
        r_samp_rate;            % system sample rate in Samples/s
        r_max_doppler;          % maximum doppler in Hertz
        r_type;                 % Exponential Decay: TDL-i, TDL-ii, TDL-iii(NLOS) or TDL-iv, TDL-v (LOS) etc.
        r_DS_desired;           % scaling factor of normalized delay spread (e.g. according to ITU-R M.2412-0, Table A1-43)
        r_K;                    % Rician fading K factor
        r_interpolation;        % do we use interpolation of the PDP?
        
        % variables set and used internally
        r_matlab_MIMO_obj;      % reference to the matlab object -> will be set in init function
        r_appendix;             % appended samples by rayleigh channel -> will be set in init function
    end
    
    methods (Static = true, Access = public)
       
       % Init parameters outside of constructor, or use the rf_channel_example_factory.
       % This is typically more convenient than controlling all parameters through class methods.
       function obj = channel_t()
            obj.verbosity               = 0;
            obj.verbosity_cp            = [];
            obj.type                    = [];
            
            obj.N_TX                    = [];
            obj.N_RX                    = [];
            obj.spectrum_occupied       = [];

            obj.amp                     = [];
            obj.sto_integer             = [];
            obj.sto_fractional          = [];
            obj.cfo                     = [];
            obj.err_phase               = [];
            obj.snr_db                  = [];
            
            obj.r_samp_rate             = [];
            obj.r_max_doppler           = [];
            obj.r_type                  = [];
            obj.r_DS_desired            = [];
            obj.r_K                     = [];
            obj.r_interpolation         = [];            

            obj.r_matlab_MIMO_obj       = [];
            obj.r_appendix              = [];
       end
    end
    
    methods (Static = false, Access = public)
        
        % after setting the members for Rayleigh and Rician channel, this function must be called to init Matlab's comm.MIMOChannel
        function init_rayleigh_rician_channel(obj)
            
            if strcmp(obj.type,'rayleigh') == false && strcmp(obj.type,'rician') == false
                if strcmp(obj.type,'awgn')
                    % warning('Incorrect channel type %s. Must be rayleigh or rician to call init_rayleigh_rician_channel().', obj.type);
                    return;
                else
                    error('Unknown channel type %s. Must be awgn, rayleigh or rician.', obj.type);
                end              
            end
            
            Ts = 1/obj.r_samp_rate;
            
            % first we have to pick a power delay profile from literature
            if strcmp(obj.r_type, 'TDL-i')

                pathDelays_beforeInterpolation = [    0.0000, ...
                                                        0.3819, ...
                                                        0.4025, ...
                                                        0.5868, ...
                                                        0.4610, ...
                                                        0.5375, ...
                                                        0.6708, ...
                                                        0.5750, ...
                                                        0.7618, ...
                                                        1.5375, ...
                                                        1.8978, ...
                                                        2.2242, ...
                                                        2.1718, ...
                                                        2.4942, ...
                                                        2.5119, ...
                                                        3.0582, ...
                                                        4.0810, ...
                                                        4.4579, ...
                                                        4.5695, ...
                                                        4.7966, ...
                                                        5.0066, ...
                                                        5.3043, ...
                                                        9.6586];
                avgPathGains_beforeInterpolation = [  -13.4, ...
                                                        -0, ...
                                                        -2.2, ...
                                                        -4, ...
                                                        -6, ...
                                                        -8.2, ...
                                                        -9.9, ...
                                                        -10.5, ...
                                                        -7.5, ...
                                                        -15.9, ...
                                                        -6.6, ...
                                                        -16.7, ...
                                                        -12.4, ...
                                                        -15.2, ...
                                                        -10.8, ...
                                                        -11.3, ...
                                                        -12.7, ...
                                                        -16.2, ...
                                                        -18.3, ...
                                                        -18.9, ...
                                                        -16.6, ...
                                                        -19.9, ...
                                                        -29.7];

            elseif strcmp(obj.r_type, 'TDL-ii')

                pathDelays_beforeInterpolation = [    0.0000, ...
                                                        0.1072, ...
                                                        0.2155, ...
                                                        0.2095, ...
                                                        0.2870, ...
                                                        0.2986, ...
                                                        0.3752, ...
                                                        0.5055, ...
                                                        0.3681, ...
                                                        0.3697, ...
                                                        0.5700, ...
                                                        0.5283, ...
                                                        1.1021, ...
                                                        1.2756, ...
                                                        1.5474, ...
                                                        1.7842, ...
                                                        2.0169, ...
                                                        2.8294, ...
                                                        3.0219, ...
                                                        3.6187, ...
                                                        4.1067, ...
                                                        4.2790, ...
                                                        4.7834];
                avgPathGains_beforeInterpolation = [  0, ...
                                                        -2.2, ...
                                                        -4, ...
                                                        -3.2, ...
                                                        -9.8, ...
                                                        -1.2, ...
                                                        -3.4, ...
                                                        -5.2, ...
                                                        -7.6, ...
                                                        -3, ...
                                                        -8.9, ...
                                                        -9, ...
                                                        -4.8, ...
                                                        -5.7, ...
                                                        -7.5, ...
                                                        -1.9, ...
                                                        -7.6, ...
                                                        -12.2, ...
                                                        -9.8, ...
                                                        -11.4, ...
                                                        -14.9, ...
                                                        -9.2, ...
                                                        -11.3];

            elseif strcmp(obj.r_type, 'TDL-iii')

                pathDelays_beforeInterpolation = [    0.0000, ...
                                                        0.2099, ...
                                                        0.2219, ...
                                                        0.2329, ...
                                                        0.2176, ...
                                                        0.6366, ...
                                                        0.6448, ...
                                                        0.6560, ...
                                                        0.6584, ...
                                                        0.7935, ...
                                                        0.8213, ...
                                                        0.9336, ...
                                                        1.2285, ...
                                                        1.3083, ...
                                                        2.1704, ...
                                                        2.7105, ...
                                                        4.2589, ...
                                                        4.6003, ...
                                                        5.4902, ...
                                                        5.6077, ...
                                                        6.3065, ...
                                                        6.6374, ...
                                                        7.0427, ...
                                                        8.6523];
                avgPathGains_beforeInterpolation = [  -4.4, ...
                                                        -1.2, ...
                                                        -3.5, ...
                                                        -5.2, ...
                                                        -2.5, ...
                                                        -0, ...
                                                        -2.2, ...
                                                        -3.9, ...
                                                        -7.4, ...
                                                        -7.1, ...
                                                        -10.7, ...
                                                        -11.1, ...
                                                        -5.1, ...
                                                        -6.8, ...
                                                        -8.7, ...
                                                        -13.2, ...
                                                        -13.9, ...
                                                        -13.9, ...
                                                        -15.8, ...
                                                        -17.1, ...
                                                        -16, ...
                                                        -15.7, ...
                                                        -21.6, ...
                                                        -22.8];

            elseif strcmp(obj.r_type, 'TDL-iv')

                pathDelays_beforeInterpolation = [    0.000, ...
                                                        0.001, ...
                                                        0.035, ...
                                                        0.612, ...
                                                        1.363, ...
                                                        1.405, ...
                                                        1.804, ...
                                                        2.596, ...
                                                        1.775, ...
                                                        4.042, ...
                                                        7.937, ...
                                                        9.424, ...
                                                        9.708, ...
                                                       12.525];
                avgPathGains_beforeInterpolation = [  -0.2, ...
                                                        -13.5, ...
                                                        -18.8, ...
                                                        -21.0, ...
                                                        -22.8, ...
                                                        -17.9, ...
                                                        -20.1, ...
                                                        -21.9, ...
                                                        -22.9, ...
                                                        -27.8, ...
                                                        -23.6, ...
                                                        -24.8, ...
                                                        -30.0, ...
                                                        -27.7];

            elseif strcmp(obj.r_type, 'TDL-v')

                pathDelays_beforeInterpolation = [    0.000, ...
                                                        0.001, ...
                                                        0.5133, ...
                                                        0.5440, ...
                                                        0.5630, ...
                                                        0.5441, ...
                                                        0.7112, ...
                                                        1.9092, ...
                                                        1.9293, ...
                                                        1.9589, ...
                                                        2.6426, ...
                                                        3.7136, ...
                                                        5.4524, ...
                                                       12.0034, ...
                                                       20.6519];
                avgPathGains_beforeInterpolation = [  -0.03, ...
                                                        -22.03, ...
                                                        -15.8, ...
                                                        -18.1, ...
                                                        -19.8, ...
                                                        -22.9, ...
                                                        -22.4, ...
                                                        -18.6, ...
                                                        -20.8, ...
                                                        -22.6, ...
                                                        -22.3, ...
                                                        -25.6, ...
                                                        -20.2, ...
                                                        -29.8, ...
                                                        -29.2];                                                      


            elseif strcmp(obj.r_type, 'InH LOS')

                assert(obj.r_DS_desired == 1);

                pathDelays_beforeInterpolation = [      0, ...
                                                        10, ...
                                                        25, ...
                                                        25.0001, ...
                                                        30, ...
                                                        35, ...
                                                        40, ...
                                                        50, ...
                                                        55, ...
                                                        60, ...
                                                        65, ...
                                                        85, ...
                                                        90, ...
                                                        100, ...
                                                        130];

                pathDelays_beforeInterpolation = pathDelays_beforeInterpolation*1e-9;

                avgPathGains_beforeInterpolation = [    0, ...
                                                        -15.7, ...
                                                        -10.5, ...
                                                        -16.7, ...
                                                        -17.6, ...
                                                        -14.1, ...
                                                        -12.9, ...
                                                        -19.5, ...
                                                        -21.8, ...
                                                        -20.8, ...
                                                        -24.1, ...
                                                        -13.9, ...
                                                        -20.1, ...
                                                        -18.0, ...
                                                        -21.0];

            elseif strcmp(obj.r_type, 'InH NLOS')

                assert(obj.r_DS_desired == 1);

                pathDelays_beforeInterpolation = [      0, ...
                                                        15, ...
                                                        20, ...
                                                        25, ...
                                                        30, ...
                                                        40, ...
                                                        55, ...
                                                        60, ...
                                                        60.0001, ...
                                                        70, ...
                                                        75, ...
                                                        75.0001, ...
                                                        90, ...
                                                        150, ...
                                                        160, ...
                                                        170, ...
                                                        195, ...
                                                        205, ...
                                                        225];

                pathDelays_beforeInterpolation = pathDelays_beforeInterpolation*1e-9;

                avgPathGains_beforeInterpolation = [    -2.4, ...
                                                        -1.9, ...
                                                        -8.1, ...
                                                        -1.8, ...
                                                        -0.0, ...
                                                        -2.3, ...
                                                        -3.7, ...
                                                        -8.4, ...
                                                        -3.2, ...
                                                        -9.7, ...
                                                        -6.2, ...
                                                        -8.9, ...
                                                        -4.0, ...
                                                        -14.1, ...
                                                        -12.1, ...
                                                        -10.6, ...
                                                        -19.6, ...
                                                        -16.8, ...
                                                        -13.5];

            elseif strcmp(obj.r_type, 'UMi LOS')

                assert(obj.r_DS_desired == 1);

                pathDelays_beforeInterpolation = [      0, ...
                                                        30, ...
                                                        35, ...
                                                        40, ...
                                                        85, ...
                                                        135, ...
                                                        140, ...
                                                        145, ...
                                                        160, ...
                                                        195, ...
                                                        210, ...
                                                        255, ...
                                                        280, ...
                                                        340, ...
                                                        360, ...
                                                        420];

                pathDelays_beforeInterpolation = pathDelays_beforeInterpolation*1e-9;

                avgPathGains_beforeInterpolation = [    0, ...
                                                        -15.6, ...
                                                        -17.8, ...
                                                        -19.6, ...
                                                        -14.0, ...
                                                        -15.8, ...
                                                        -18.0, ...
                                                        -19.8, ...
                                                        -20.7, ...
                                                        -17.3, ...
                                                        -21.8, ...
                                                        -17.7, ...
                                                        -21.6, ...
                                                        -23.0, ...
                                                        -24.5, ...
                                                        -25.0];

            elseif strcmp(obj.r_type, 'UMi NLOS')

                assert(obj.r_DS_desired == 1);                    

                pathDelays_beforeInterpolation = [      0, ...
                                                        10, ...
                                                        15, ...
                                                        10.0001, ...
                                                        20, ...
                                                        35, ...
                                                        40, ...
                                                        45, ...
                                                        50, ...
                                                        55, ...
                                                        55.0001, ...
                                                        200, ...
                                                        205, ...
                                                        250, ...
                                                        330, ...
                                                        440, ...
                                                        440.0001, ...
                                                        515, ...
                                                        530, ...
                                                        580, ...
                                                        590, ...
                                                        625, ...
                                                        730];

                pathDelays_beforeInterpolation = pathDelays_beforeInterpolation*1e-9;

                avgPathGains_beforeInterpolation = [    -6.7, ...
                                                        -4.9, ...
                                                        -7.1, ...
                                                        -8.9, ...
                                                        -1.9, ...
                                                        -6.3, ...
                                                        -3.0, ...
                                                        -5.2, ...
                                                        -7.0, ...
                                                        -7.5, ...
                                                        -6.4, ...
                                                        -10.8, ...
                                                        -5.2, ...
                                                        -4.9, ...
                                                        -9.2, ...
                                                        -15.5, ...
                                                        -16.7, ...
                                                        -12.4, ...
                                                        -16.9, ...
                                                        -12.7, ...
                                                        -23.5, ...
                                                        -22.1, ...
                                                        -23.6];

            elseif strcmp(obj.r_type, 'UMi OtI')

                assert(obj.r_DS_desired == 1);

                pathDelays_beforeInterpolation = [      0, ...
                                                        5, ...
                                                        10, ...
                                                        0.0001, ...
                                                        5.0001, ...
                                                        10.0001, ...
                                                        35, ...
                                                        35.0001, ...
                                                        65, ...
                                                        70, ...
                                                        75, ...
                                                        120, ...
                                                        125, ...
                                                        195, ...
                                                        250, ...
                                                        305];

                pathDelays_beforeInterpolation = pathDelays_beforeInterpolation*1e-9;

                avgPathGains_beforeInterpolation = [    -3, ...
                                                        -5.2, ...
                                                        -7.0, ...
                                                        -8.7, ...
                                                        -3.7, ...
                                                        -11.9, ...
                                                        -16.2, ...
                                                        -6.9, ...
                                                        -3.4, ...
                                                        -5.6, ...
                                                        -7.3, ...
                                                        -10.3, ...
                                                        -20.7, ...
                                                        -16.0, ...
                                                        -21.0, ...
                                                        -22.9];

            else
                error('Unknown channel model %s.', obj.r_type);
            end

            % scale the path delays to achieve RMS delay spread
            pathDelays_beforeInterpolation = pathDelays_beforeInterpolation*obj.r_DS_desired;

            % then sort delays, for some reason they are not sorted in the ITU document
            [pathDelays_beforeInterpolation, I] = sort(pathDelays_beforeInterpolation);
            avgPathGains_beforeInterpolation = avgPathGains_beforeInterpolation(I);
            
            % we cannot add dBs, so switch to linear values
            avgPathGains_beforeInterpolation_linear = db2pow(avgPathGains_beforeInterpolation);            

            if obj.r_interpolation == true

                % how often can we sample the power delay profile at our system sample rate?
                n_points = ceil(pathDelays_beforeInterpolation(end) / Ts);
                pathDelays = (0:1:n_points)*Ts;

                % empty container
                avgPathGains_linear = zeros(size(pathDelays));

                % assign each given path delay from the profiles above to the closest sampling point
                for qq = 1:1:numel(pathDelays_beforeInterpolation)

                    tmp = pathDelays_beforeInterpolation(qq);

                    [~,idx] = min(abs(pathDelays - tmp));

                    avgPathGains_linear(idx) = avgPathGains_linear(idx) + avgPathGains_beforeInterpolation_linear(qq);
                end

                % remove any points that have no power, this only increases simulation time to no avail
                tmp_del = (avgPathGains_linear == 0);
                avgPathGains_linear(tmp_del) = []; 
                pathDelays(tmp_del) = [];

                assert(abs(sum(avgPathGains_linear) / sum(avgPathGains_beforeInterpolation_linear) - 1) <= 1e-6);
            else

                % Without interpolation we depend on the matlab implementation.
                % Unfortunately, it shows some unexpected behavior:
                %   For example, when the delay spread is very small (<< 1ns), the channel should be flat fading.
                %   This is not the case, also we see an unexpected delay.
                pathDelays = pathDelays_beforeInterpolation;
                n_points = numel(pathDelays);
                avgPathGains_linear = avgPathGains_beforeInterpolation_linear;
            end

            % normalize
            avgPathGains_beforeInterpolation_linear = avgPathGains_beforeInterpolation_linear/sqrt(sum(avgPathGains_beforeInterpolation_linear.^2));
            avgPathGains_beforeInterpolation = pow2db(avgPathGains_beforeInterpolation_linear);

            % normalize (Matlab also normalizes)
            avgPathGains_linear = avgPathGains_linear/sqrt(sum(avgPathGains_linear.^2));
            avgPathGains = pow2db(avgPathGains_linear);                
            
            assert(numel(pathDelays) == numel(unique(pathDelays)));
            assert(sum(pathDelays < 0) == 0);
            assert(sum(isnan(avgPathGains)) == 0);
            assert(sum(~isfinite(avgPathGains)) == 0);

            % show some channel properties
            if obj.verbosity > 0
                mean_tau_weighted = sum(pathDelays.*avgPathGains_linear)/sum(avgPathGains_linear);
                rms_tau = sqrt(sum(((pathDelays-mean_tau_weighted).^2).*avgPathGains_linear)/sum(avgPathGains_linear));

                disp('##### Channel ######');
                fprintf('Sampling Rate: %f MS/s\n', obj.r_samp_rate/1e6);
                fprintf('Sampling time Ts: %f ns\n', Ts/1e-9);
                fprintf('Largest delay: %f ns\n', pathDelays(end)/1e-9);
                fprintf('PDP sampling points: %d\n', n_points);
                fprintf('CP length: %f ns\n', obj.verbosity_cp*Ts/1e-9);
                fprintf('CP number of samples: %d\n', obj.verbosity_cp);
                fprintf('CP / latest delay: %f\n', obj.verbosity_cp*Ts / pathDelays(end));
                fprintf('Tau mean: %f ns\n', mean(pathDelays)/1e-9);
                fprintf('Tau mean weighted: %f ns\n', mean_tau_weighted/1e-9);
                fprintf('Tau rms weighted: %f ns\n', rms_tau/1e-9);
                fprintf('Coherence Bandwidth: %f MHz\n', 1/rms_tau/1e6);
                fprintf('Occupied Bandwidth: %f MHz\n\n', obj.r_samp_rate*obj.spectrum_occupied/1e6);
            end

            % plot path gains in dB and linear
            if obj.verbosity > 1
                figure()
                clf()

                subplot(2,1,1);
                plot(pathDelays_beforeInterpolation, avgPathGains_beforeInterpolation_linear, 'b-o');
                hold on
                plot(pathDelays, avgPathGains_linear,'r-x');
                title('Path Gains linear');
                xlabel('Time');
                ylabel('Path Gain');
                legend('ITU', 'Interpolation');
                grid on

                % not yet normalized, just for comparison
                avgPathGains = pow2db(avgPathGains_linear);

                subplot(2,1,2);
                plot(pathDelays_beforeInterpolation, avgPathGains_beforeInterpolation, 'b-o');
                hold on
                plot(pathDelays, avgPathGains, 'r-x');
                title('Path Gains logarithmic');
                xlabel('Time');
                ylabel('Path Gain (dB)');
                legend('ITU', 'Interpolation');
                grid on
            end
            
            % determine how many samples the channel is adding
            obj.r_appendix = ceil(max(pathDelays)/Ts);

            % create channel object
            if strcmp(obj.type,'rayleigh') == true
                
                assert(strcmp(obj.r_type, 'TDL-i') || ...
                       strcmp(obj.r_type, 'TDL-ii') || ...
                       strcmp(obj.r_type, 'TDL-iii') || ...
                       strcmp(obj.r_type, 'InH NLOS') || ...
                       strcmp(obj.r_type, 'UMi NLOS') || ...
                       strcmp(obj.r_type, 'UMi OtI'));

                obj.r_matlab_MIMO_obj = comm.MIMOChannel(   'SampleRate', obj.r_samp_rate, ...
                                                            'PathDelays', pathDelays, ...
                                                            'AveragePathGains', avgPathGains, ...
                                                            'NormalizePathGains', true, ...
                                                            'FadingDistribution', 'Rayleigh', ... % KFactor, DirectPathDopplerShift, DirectPathInitialPhase
                                                            'MaximumDopplerShift', obj.r_max_doppler, ...
                                                            'DopplerSpectrum', doppler('Jakes'), ...
                                                            'SpatialCorrelationSpecification', 'Separate Tx Rx', ... %'NumTransmitAntennas', obj.N_TX, 'NumReceiveAntennas', obj.N_RX, ...
                                                            'TransmitCorrelationMatrix', eye(obj.N_TX), ...
                                                            'ReceiveCorrelationMatrix', eye(obj.N_RX), ... % SpatialCorrelationMatrix
                                                            'AntennaSelection', 'off', ...
                                                            'NormalizeChannelOutputs', false, ...
                                                            'FadingTechnique', 'Sum of sinusoids', ...
                                                            'NumSinusoids', 48, ...
                                                            'InitialTimeSource', 'Input Port', ... % InitialTime
                                                            'RandomStream', 'Global stream', ... % Seed
                                                            'PathGainsOutputPort', false, ...
                                                            'Visualization', 'off'); %AntennaPairsToDisplay, PathsForDopplerDisplay, SamplesToDisplay
                
            elseif strcmp(obj.type,'rician') == true
                
                assert(strcmp(obj.r_type, 'TDL-iv') || ...
                       strcmp(obj.r_type, 'TDL-v') || ...
                       strcmp(obj.r_type, 'InH LOS') || ...
                       strcmp(obj.r_type, 'UMi LOS'));
                
                obj.r_matlab_MIMO_obj = comm.MIMOChannel(   'SampleRate', obj.r_samp_rate, ...
                                                            'PathDelays', pathDelays, ...
                                                            'AveragePathGains', avgPathGains, ...
                                                            'NormalizePathGains', true, ...
                                                            'FadingDistribution', 'Rician', ...
                                                            'KFactor', obj.r_K, ...
                                                            'DirectPathDopplerShift',obj.r_max_doppler*0.7, ...
                                                            'DirectPathInitialPhase',0, ...
                                                            'MaximumDopplerShift', obj.r_max_doppler, ...
                                                            'DopplerSpectrum', doppler('Jakes'), ...
                                                            'SpatialCorrelationSpecification', 'Separate Tx Rx', ... %'NumTransmitAntennas', obj.N_TX, 'NumReceiveAntennas', obj.N_RX, ...
                                                            'TransmitCorrelationMatrix', eye(obj.N_TX), ...
                                                            'ReceiveCorrelationMatrix', eye(obj.N_RX), ... % SpatialCorrelationMatrix
                                                            'AntennaSelection', 'off', ...
                                                            'NormalizeChannelOutputs', false, ...
                                                            'FadingTechnique', 'Sum of sinusoids', ...
                                                            'NumSinusoids', 48, ...
                                                            'InitialTimeSource', 'Input Port', ... % InitialTime
                                                            'RandomStream', 'Global stream', ... % Seed
                                                            'PathGainsOutputPort', false, ...
                                                            'Visualization', 'off'); %AntennaPairsToDisplay, PathsForDopplerDisplay, SamplesToDisplay
            end
        end
        
        function [samples_antenna_rx] = pass_samples(obj, samples_antenna_tx, channel_time_in_seconds)
            
            if nargin == 2
                channel_time_in_seconds = 0;
            end
            
            assert(obj.N_TX == size(samples_antenna_tx, 2));
            
            samples_antenna_ch = obj.amp*samples_antenna_tx;

            samples_antenna_ch = lib_channel.sto_cfo_phase(samples_antenna_ch, ...
                                                           obj.sto_integer, ...
                                                           obj.sto_fractional, ...
                                                           obj.cfo, ...
                                                           obj.err_phase);
            
            if strcmp(obj.type, 'awgn')

                samples_antenna_rx = samples_antenna_ch(:,1);
                
                % all TX and received at all RX
                for i=2:1:obj.N_TX
                    samples_antenna_rx = samples_antenna_rx + samples_antenna_ch(:,i);
                end

                samples_antenna_rx = repmat(samples_antenna_rx, 1, obj.N_RX);
                
            elseif strcmp(obj.type, 'rayleigh') == true || strcmp(obj.type, 'rician') == true
                    
                samples_antenna_rx = obj.r_matlab_MIMO_obj(samples_antenna_ch, channel_time_in_seconds);
                
            else
                error('Channel neither awgn, nor rayleigh, nor rician, but %s.', obj.type);
            end
            
            % final step is to add noise to each rx antenna
            for i=1:1:obj.N_RX
                samples_antenna_rx(:,i) = awgn(samples_antenna_rx(:,i), obj.snr_db, pow2db(1/obj.spectrum_occupied));
            end
        end
        
        function [] = reset_random_rayleigh_rician(obj)
            if strcmp(obj.type,'rayleigh') == true || strcmp(obj.type,'rician') == true
                obj.r_matlab_MIMO_obj.reset();
            end
        end
    end
end
