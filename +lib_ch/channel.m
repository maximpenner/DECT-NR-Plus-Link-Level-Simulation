classdef rf_channel < handle
    
    properties
        
        verbosity;
        verbosity_cp;           % Cyclic prefix in samples (oversampling must be included).
                                % Only used when verbose is set to a value above 0 and channel is rayleigh/rician.
                                % Very useful for debugging to see if channel response is longer than cyclic prefix.
                                % Otherwise it can be easily missed that the channel response is longer than the CP.

        type;                   % awgn, rayleigh, rician
        
        % variables used by all channel types
        amp;                    % amplitude as linear factor, can be linked to large-scale pathloss
        noise;                  % boolean to add white noise to signal
        snr_db;                 % in-band (i.e. occupied spectrum) signal-to-noise-ratio in dB
        spectrum_occupied;      % How much of the total spectrum do we occupy? This information is required for adding noise.
        N_TX;                   % number of transmit antennas
        N_RX;                   % number of receive antennas

        % This RF channel model allows controlling how random numbers are generated. Typically, it is sufficient to rely on
        % rng("default"). However, sometimes errors only occur very rarely after hours of simulation across multiple workers.
        % To be able to reproduce these errors, it is usually easier to control the generator and seed.
        
        % awgn_random_source = 'global'
        %
        %   Noise is generated by using the global rng.
        %   By controlling the global rng, we can control the regeneration of noise.
        %   By not altering the global rng, we get new noise everytime.
        %
        % awgn_random_source = 'local'
        %
        %   Noise is generated by using a local random number stream 'awgn_randomstream', which has to be initialized externally.
        %   A call of reset_random_awgn() resets the awgn_randomstream and the same values of noise are regenerated.
        %   This functionality is convenient for switching between independent channels with only one class instance:
        %       The comm.MIMOchannel uses the global rng, which is controlled externally.
        %       By setting the global rng to a value A, we generate a channel A and jump in time.
        %       By setting the global rng to a value B, we generate a channel B and jump in time.
        %       By resetting to A again, we can go back to channel A and jump in time.
        %       The noise, however, uses this local stream and is completely independent from channel A and B.
        %
        awgn_random_source;     % global or local
        awgn_randomstream;      % if awgn_random_source=local, this is the random stream for the awgn function         
        
        % For AWGN channel only (prefix a_)
        %
        % This channel type adds AWGN to the input signal without multipath components, and optionally STO, CFO and error phase.
        % The AWGN is added after applying STO, CFO and error phase.
        a_sto;                  % symbol timing offset im samples, must be >= 0
        a_cfo;                  % carrier frequency offset in Hertz
        a_err_phase;            % error phase in radians

        % For rayleigh/rician channel only (prefix r_)
        %
        % source: https://de.mathworks.com/help/comm/ref/comm.mimochannel-system-object.html
        %
        % r_random_source = 'global'
        %
        %   Channel coefficients are generated by using the global rng.
        %   A call to reset_random_rayleigh_rician() resets only the internal filters.
        %   If the global number stream is NOT reset (or best even touched for that matter), we generate new, independent channel coefficients.
        %   If the global number stream is reset as well, we can regenerate the exact same channel coefficients for any moment in time.
        %
        % r_random_source = 'local'
        %
        %   Channel coefficients are generated using an internal rng with seed r_seed.
        %   A call of reset_random_rayleigh_rician() resets the interal filters and the generated gaussian noise input, therefore the same channel coefficients are regenerated.
        %
        r_random_source;        % global for global random source, local to use mt19937ar with seed r_seed
        r_seed;                 % if r_random_source=local, this is the seed for the matlab rayleigh object
        r_sto;
        r_cfo;
        r_err_phase;
        r_samp_rate;            % system sample rate in Samples/s
        r_max_doppler;          % maximum doppler in Hertz
        r_type;                 % Exponential Decay: TDL-i, TDL-ii, TDL-iii(NLOS) or TDL-iv, TDL-v (LOS) etc.
        r_DS_desired;           % scaling factor of normalized delay spread (e.g. according to ITU-R M.2412-0, Table A1-43)
        r_K;                    % Rician fading K factor
        r_interpolation;        % do we use interpolation of the PDP?
        r_gains_active;         % activate or deactivate output of path gains
        
        % variables set and used internally
        r_matlab_MIMO_obj;      % reference to the matlab object -> will be set in init function
        r_gains;                % gains of channel per tap, only active when r_gains_active=true
        r_appendix;             % appended samples by rayleigh channel -> will be set in init function
        
        % tools for debugging
        samples_antenna_rx_no_noise;        % channel output without AWGN
        samples_antenna_rx_only_noise;      % only AWGN without the user signal
    end
    
    methods (Static = true, Access = public)
       
       % Init parameters outside of constructor, or use the rf_channel_example_factory.
       % This is typically more convenient than controlling all parameters through class methods.
       function obj = rf_channel()
            obj.verbosity                 = 0;
            obj.verbosity_cp              = [];
            obj.type                    = [];
            
            obj.amp                     = [];
            obj.noise                   = [];
            obj.snr_db                  = [];
            obj.spectrum_occupied       = [];
            obj.N_TX                    = [];
            obj.N_RX                    = []; 
            
            obj.awgn_random_source      = [];
            obj.awgn_randomstream       = [];
                        
            obj.a_sto                   = [];
            obj.a_cfo                   = [];
            obj.a_err_phase             = [];
            
            obj.r_random_source         = [];
            obj.r_seed                  = [];
            obj.r_sto                   = [];
            obj.r_cfo                   = [];
            obj.r_err_phase             = [];
            obj.r_samp_rate             = [];
            obj.r_max_doppler           = [];
            obj.r_type                  = [];
            obj.r_DS_desired            = [];
            obj.r_K                     = [];
            obj.r_interpolation         = [];
            obj.r_gains_active          = [];            

            obj.r_matlab_MIMO_obj       = [];
            obj.r_gains                 = [];
            obj.r_appendix              = [];
            
            obj.samples_antenna_rx_no_noise = [];
            obj.samples_antenna_rx_only_noise = [];
       end
    end
    
    methods (Static = false, Access = public)
        
        % after setting the members for Rayleigh and Rician channel, this function must be called to init Matlab's comm.MIMOChannel
        function init_rayleigh_rician_channel(obj)
            
            % sanity check
            if strcmp(obj.type,'rayleigh') == false && strcmp(obj.type,'rician') == false
                if strcmp(obj.type,'awgn')
                    % warning('Incorrect channel type %s. Must be rayleigh or rician to call init_rayleigh_rician_channel().', obj.type);
                    return;
                else
                    error('Unknown channel type %s. Must be awgn, rayleigh or rician.', obj.type);
                end              
            end
            
            Ts = 1/obj.r_samp_rate;
            
            % first we have to pick a power delay profile from literature
            if strcmp(obj.r_type, 'TDL-i')

                pathDelays_beforeInterpolation = [    0.0000,...
                                                        0.3819,...
                                                        0.4025,...
                                                        0.5868,...
                                                        0.4610,...
                                                        0.5375,...
                                                        0.6708,...
                                                        0.5750,...
                                                        0.7618,...
                                                        1.5375,...
                                                        1.8978,...
                                                        2.2242,...
                                                        2.1718,...
                                                        2.4942,...
                                                        2.5119,...
                                                        3.0582,...
                                                        4.0810,...
                                                        4.4579,...
                                                        4.5695,...
                                                        4.7966,...
                                                        5.0066,...
                                                        5.3043,...
                                                        9.6586];
                avgPathGains_beforeInterpolation = [  -13.4,...
                                                        -0,...
                                                        -2.2,...
                                                        -4,...
                                                        -6,...
                                                        -8.2,...
                                                        -9.9,...
                                                        -10.5,...
                                                        -7.5,...
                                                        -15.9,...
                                                        -6.6,...
                                                        -16.7,...
                                                        -12.4,...
                                                        -15.2,...
                                                        -10.8,...
                                                        -11.3,...
                                                        -12.7,...
                                                        -16.2,...
                                                        -18.3,...
                                                        -18.9,...
                                                        -16.6,...
                                                        -19.9,...
                                                        -29.7];

            elseif strcmp(obj.r_type, 'TDL-ii')

                pathDelays_beforeInterpolation = [    0.0000,...
                                                        0.1072,...
                                                        0.2155,...
                                                        0.2095,...
                                                        0.2870,...
                                                        0.2986,...
                                                        0.3752,...
                                                        0.5055,...
                                                        0.3681,...
                                                        0.3697,...
                                                        0.5700,...
                                                        0.5283,...
                                                        1.1021,...
                                                        1.2756,...
                                                        1.5474,...
                                                        1.7842,...
                                                        2.0169,...
                                                        2.8294,...
                                                        3.0219,...
                                                        3.6187,...
                                                        4.1067,...
                                                        4.2790,...
                                                        4.7834];
                avgPathGains_beforeInterpolation = [  0,...
                                                        -2.2,...
                                                        -4,...
                                                        -3.2,...
                                                        -9.8,...
                                                        -1.2,...
                                                        -3.4,...
                                                        -5.2,...
                                                        -7.6,...
                                                        -3,...
                                                        -8.9,...
                                                        -9,...
                                                        -4.8,...
                                                        -5.7,...
                                                        -7.5,...
                                                        -1.9,...
                                                        -7.6,...
                                                        -12.2,...
                                                        -9.8,...
                                                        -11.4,...
                                                        -14.9,...
                                                        -9.2,...
                                                        -11.3];

            elseif strcmp(obj.r_type, 'TDL-iii')

                pathDelays_beforeInterpolation = [    0.0000,...
                                                        0.2099,...
                                                        0.2219,...
                                                        0.2329,...
                                                        0.2176,...
                                                        0.6366,...
                                                        0.6448,...
                                                        0.6560,...
                                                        0.6584,...
                                                        0.7935,...
                                                        0.8213,...
                                                        0.9336,...
                                                        1.2285,...
                                                        1.3083,...
                                                        2.1704,...
                                                        2.7105,...
                                                        4.2589,...
                                                        4.6003,...
                                                        5.4902,...
                                                        5.6077,...
                                                        6.3065,...
                                                        6.6374,...
                                                        7.0427,...
                                                        8.6523];
                avgPathGains_beforeInterpolation = [  -4.4,...
                                                        -1.2,...
                                                        -3.5,...
                                                        -5.2,...
                                                        -2.5,...
                                                        -0,...
                                                        -2.2,...
                                                        -3.9,...
                                                        -7.4,...
                                                        -7.1,...
                                                        -10.7,...
                                                        -11.1,...
                                                        -5.1,...
                                                        -6.8,...
                                                        -8.7,...
                                                        -13.2,...
                                                        -13.9,...
                                                        -13.9,...
                                                        -15.8,...
                                                        -17.1,...
                                                        -16,...
                                                        -15.7,...
                                                        -21.6,...
                                                        -22.8];

            elseif strcmp(obj.r_type, 'TDL-iv')

                pathDelays_beforeInterpolation = [    0.000,...
                                                        0.001,...
                                                        0.035,...
                                                        0.612,...
                                                        1.363,...
                                                        1.405,...
                                                        1.804,...
                                                        2.596,...
                                                        1.775,...
                                                        4.042,...
                                                        7.937,...
                                                        9.424,...
                                                        9.708,...
                                                       12.525];
                avgPathGains_beforeInterpolation = [  -0.2,...
                                                        -13.5,...
                                                        -18.8,...
                                                        -21.0,...
                                                        -22.8,...
                                                        -17.9,...
                                                        -20.1,...
                                                        -21.9,...
                                                        -22.9,...
                                                        -27.8,...
                                                        -23.6,...
                                                        -24.8,...
                                                        -30.0,...
                                                        -27.7];

            elseif strcmp(obj.r_type, 'TDL-v')

                pathDelays_beforeInterpolation = [    0.000,...
                                                        0.001,...
                                                        0.5133,...
                                                        0.5440,...
                                                        0.5630,...
                                                        0.5441,...
                                                        0.7112,...
                                                        1.9092,...
                                                        1.9293,...
                                                        1.9589,...
                                                        2.6426,...
                                                        3.7136,...
                                                        5.4524,...
                                                       12.0034,...
                                                       20.6519];
                avgPathGains_beforeInterpolation = [  -0.03,...
                                                        -22.03,...
                                                        -15.8,...
                                                        -18.1,...
                                                        -19.8,...
                                                        -22.9,...
                                                        -22.4,...
                                                        -18.6,...
                                                        -20.8,...
                                                        -22.6,...
                                                        -22.3,...
                                                        -25.6,...
                                                        -20.2,...
                                                        -29.8,...
                                                        -29.2];                                                      


            elseif strcmp(obj.r_type, 'InH LOS')

                % sanity check
                if obj.r_DS_desired ~= 1
                    error('InH does not require DS desired, already scaled.');
                end                  

                pathDelays_beforeInterpolation = [      0,...
                                                        10,...
                                                        25,...
                                                        25.0001,...
                                                        30,...
                                                        35,...
                                                        40,...
                                                        50,...
                                                        55,...
                                                        60,...
                                                        65,...
                                                        85,...
                                                        90,...
                                                        100,...
                                                        130];

                pathDelays_beforeInterpolation = pathDelays_beforeInterpolation*1e-9;

                avgPathGains_beforeInterpolation = [    0,...
                                                        -15.7,...
                                                        -10.5,...
                                                        -16.7,...
                                                        -17.6,...
                                                        -14.1,...
                                                        -12.9,...
                                                        -19.5,...
                                                        -21.8,...
                                                        -20.8,...
                                                        -24.1,...
                                                        -13.9,...
                                                        -20.1,...
                                                        -18.0,...
                                                        -21.0];

            elseif strcmp(obj.r_type, 'InH NLOS')

                % sanity check
                if obj.r_DS_desired ~= 1
                    error('InH does not require DS desired, already scaled.');
                end                  

                pathDelays_beforeInterpolation = [      0,...
                                                        15,...
                                                        20,...
                                                        25,...
                                                        30,...
                                                        40,...
                                                        55,...
                                                        60,...
                                                        60.0001,...
                                                        70,...
                                                        75,...
                                                        75.0001,...
                                                        90,...
                                                        150,...
                                                        160,...
                                                        170,...
                                                        195,...
                                                        205,...
                                                        225];

                pathDelays_beforeInterpolation = pathDelays_beforeInterpolation*1e-9;

                avgPathGains_beforeInterpolation = [    -2.4,...
                                                        -1.9,...
                                                        -8.1,...
                                                        -1.8,...
                                                        -0.0,...
                                                        -2.3,...
                                                        -3.7,...
                                                        -8.4,...
                                                        -3.2,...
                                                        -9.7,...
                                                        -6.2,...
                                                        -8.9,...
                                                        -4.0,...
                                                        -14.1,...
                                                        -12.1,...
                                                        -10.6,...
                                                        -19.6,...
                                                        -16.8,...
                                                        -13.5];

            elseif strcmp(obj.r_type, 'UMi LOS')

                % sanity check
                if obj.r_DS_desired ~= 1
                    error('UMi does not require DS desired, already scaled.');
                end                  

                pathDelays_beforeInterpolation = [      0,...
                                                        30,...
                                                        35,...
                                                        40,...
                                                        85,...
                                                        135,...
                                                        140,...
                                                        145,...
                                                        160,...
                                                        195,...
                                                        210,...
                                                        255,...
                                                        280,...
                                                        340,...
                                                        360,...
                                                        420];

                pathDelays_beforeInterpolation = pathDelays_beforeInterpolation*1e-9;

                avgPathGains_beforeInterpolation = [    0,...
                                                        -15.6,...
                                                        -17.8,...
                                                        -19.6,...
                                                        -14.0,...
                                                        -15.8,...
                                                        -18.0,...
                                                        -19.8,...
                                                        -20.7,...
                                                        -17.3,...
                                                        -21.8,...
                                                        -17.7,...
                                                        -21.6,...
                                                        -23.0,...
                                                        -24.5,...
                                                        -25.0];

            elseif strcmp(obj.r_type, 'UMi NLOS')

                % sanity check
                if obj.r_DS_desired ~= 1
                    error('UMi does not require DS desired, already scaled.');
                end                    

                pathDelays_beforeInterpolation = [      0,...
                                                        10,...
                                                        15,...
                                                        10.0001,...
                                                        20,...
                                                        35,...
                                                        40,...
                                                        45,...
                                                        50,...
                                                        55,...
                                                        55.0001,...
                                                        200,...
                                                        205,...
                                                        250,...
                                                        330,...
                                                        440,...
                                                        440.0001,...
                                                        515,...
                                                        530,...
                                                        580,...
                                                        590,...
                                                        625,...
                                                        730];

                pathDelays_beforeInterpolation = pathDelays_beforeInterpolation*1e-9;

                avgPathGains_beforeInterpolation = [    -6.7,...
                                                        -4.9,...
                                                        -7.1,...
                                                        -8.9,...
                                                        -1.9,...
                                                        -6.3,...
                                                        -3.0,...
                                                        -5.2,...
                                                        -7.0,...
                                                        -7.5,...
                                                        -6.4,...
                                                        -10.8,...
                                                        -5.2,...
                                                        -4.9,...
                                                        -9.2,...
                                                        -15.5,...
                                                        -16.7,...
                                                        -12.4,...
                                                        -16.9,...
                                                        -12.7,...
                                                        -23.5,...
                                                        -22.1,...
                                                        -23.6];

            elseif strcmp(obj.r_type, 'UMi OtI')

                % sanity check
                if obj.r_DS_desired ~= 1
                    error('UMi does not require DS desired, already scaled.');
                end

                pathDelays_beforeInterpolation = [      0,...
                                                        5,...
                                                        10,...
                                                        0.0001,...
                                                        5.0001,...
                                                        10.0001,...
                                                        35,...
                                                        35.0001,...
                                                        65,...
                                                        70,...
                                                        75,...
                                                        120,...
                                                        125,...
                                                        195,...
                                                        250,...
                                                        305];

                pathDelays_beforeInterpolation = pathDelays_beforeInterpolation*1e-9;

                avgPathGains_beforeInterpolation = [    -3,...
                                                        -5.2,...
                                                        -7.0,...
                                                        -8.7,...
                                                        -3.7,...
                                                        -11.9,...
                                                        -16.2,...
                                                        -6.9,...
                                                        -3.4,...
                                                        -5.6,...
                                                        -7.3,...
                                                        -10.3,...
                                                        -20.7,...
                                                        -16.0,...
                                                        -21.0,...
                                                        -22.9];

            else
                error('Unknown channel model %s.', obj.r_type);
            end

            % scale the path delays to achieve RMS delay spread
            pathDelays_beforeInterpolation = pathDelays_beforeInterpolation*obj.r_DS_desired;

            % then sort delays, for some reason they are not sorted in the ITU document
            [pathDelays_beforeInterpolation, I] = sort(pathDelays_beforeInterpolation);
            avgPathGains_beforeInterpolation = avgPathGains_beforeInterpolation(I);
            
            % we cannot add dBs, so switch to linear values
            avgPathGains_beforeInterpolation_linear = db2pow(avgPathGains_beforeInterpolation);            

            if obj.r_interpolation == true

                % how often can we sample the power delay profile at our system sample rate?
                n_points = ceil(pathDelays_beforeInterpolation(end) / Ts);
                pathDelays = (0:1:n_points)*Ts;

                % empty container
                avgPathGains_linear = zeros(size(pathDelays));

                % assign each given path delay from the profiles above to the closest sampling point
                for qq = 1:1:numel(pathDelays_beforeInterpolation)

                    tmp = pathDelays_beforeInterpolation(qq);

                    [~,idx] = min(abs(pathDelays - tmp));

                    avgPathGains_linear(idx) = avgPathGains_linear(idx) + avgPathGains_beforeInterpolation_linear(qq);
                end

                % remove any points that have no power, this only increases simulation time to no avail
                tmp_del = (avgPathGains_linear == 0);
                avgPathGains_linear(tmp_del) = []; 
                pathDelays(tmp_del) = [];

                % sanity check
                if abs(sum(avgPathGains_linear) / sum(avgPathGains_beforeInterpolation_linear) - 1) > 1e-6
                    error('Power sums are not equal.');
                end

            else

                % Without interpolation we depend on the matlab implementation.
                % Unfortunately, it shows some unexpected behaviour:
                %   For example, when the delay spread is very small (<< 1ns), the channel should be flat fading.
                %   This is not the case, also we see an unexpected delay.
                pathDelays = pathDelays_beforeInterpolation;
                n_points = numel(pathDelays);
                avgPathGains_linear = avgPathGains_beforeInterpolation_linear;
            end

            % normalize
            avgPathGains_beforeInterpolation_linear = avgPathGains_beforeInterpolation_linear/sqrt(sum(avgPathGains_beforeInterpolation_linear.^2));
            avgPathGains_beforeInterpolation = pow2db(avgPathGains_beforeInterpolation_linear);

            % normalize (Matlab also normalizes)
            avgPathGains_linear = avgPathGains_linear/sqrt(sum(avgPathGains_linear.^2));
            avgPathGains = pow2db(avgPathGains_linear);

            % plot path gains in dB and linear
            if obj.verbosity > 1
                figure()
                clf()

                subplot(2,1,1);
                plot(pathDelays_beforeInterpolation, avgPathGains_beforeInterpolation_linear, 'b-o');
                hold on
                plot(pathDelays, avgPathGains_linear,'r-x');
                title('Path Gains linear');
                xlabel('Time');
                ylabel('Path Gain');
                legend('ITU', 'Interpolation');
                grid on

                % not yet normalized, just for comparison
                avgPathGains = pow2db(avgPathGains_linear);

                subplot(2,1,2);
                plot(pathDelays_beforeInterpolation, avgPathGains_beforeInterpolation, 'b-o');
                hold on
                plot(pathDelays, avgPathGains, 'r-x');
                title('Path Gains logarithmic');
                xlabel('Time');
                ylabel('Path Gain (dB)');
                legend('ITU', 'Interpolation');
                grid on
            end                
            
            % sanity checks
            if numel(pathDelays) ~= numel(unique(pathDelays))
                error('There are equal path delays.');
            end            
            if sum(pathDelays < 0) > 0
                error('There are negaive path delays.');
            end
            if sum(isnan(avgPathGains)) > 0
                error('There are NaNs.');
            end
            if sum(~isfinite(avgPathGains)) > 0
                error('There are minus infinity values.');
            end

            % show some channel properties
            if obj.verbosity > 0

                mean_tau_weighted = sum(pathDelays.*avgPathGains_linear)/sum(avgPathGains_linear);
                rms_tau = sqrt(sum(((pathDelays-mean_tau_weighted).^2).*avgPathGains_linear)/sum(avgPathGains_linear));

                disp('##### Channel Properties ######');
                fprintf('Sampling Rate: %f MS/s\n', obj.r_samp_rate/1e6);
                fprintf('Sampling time Ts: %f ns\n', Ts/1e-9);
                fprintf('Largest delay: %f ns\n', pathDelays(end)/1e-9);
                fprintf('PDP sampling points: %d\n', n_points);
                fprintf('CP length: %f ns\n', obj.verbosity_cp*Ts/1e-9);
                fprintf('CP number of samples: %d\n', obj.verbosity_cp);
                fprintf('CP / latest delay: %f\n', obj.verbosity_cp*Ts / pathDelays(end));
                fprintf('Tau mean: %f ns\n', mean(pathDelays)/1e-9);
                fprintf('Tau mean weighted: %f ns\n', mean_tau_weighted/1e-9);
                fprintf('Tau rms weighted: %f ns\n', rms_tau/1e-9);
                fprintf('Coherence Bandwidth: %f MHz\n', 1/rms_tau/1e6);
                fprintf('Occupied Bandwidth: %f MHz\n', obj.r_samp_rate*obj.spectrum_occupied/1e6);
            end
            
            % determine how many samples the channel is adding
            obj.r_appendix = ceil(max(pathDelays)/Ts);

            % create channel object
            if strcmp(obj.type,'rayleigh') == true
                
                % sanity check
                if strcmp(obj.r_type, 'TDL-i') == false && ...
                        strcmp(obj.r_type, 'TDL-ii') == false && ...
                        strcmp(obj.r_type, 'TDL-iii') == false && ...
                        strcmp(obj.r_type, 'InH NLOS') == false && ...
                        strcmp(obj.r_type, 'UMi NLOS') == false && ...
                        strcmp(obj.r_type, 'UMi OtI') == false
                    
                    error('This is not a rayleigh fading channel: %s.', obj.r_type);
                end
                
                if strcmp(obj.r_random_source,'global') == true

                    obj.r_matlab_MIMO_obj = comm.MIMOChannel(   'SampleRate', obj.r_samp_rate, ...
                                                                'PathDelays', pathDelays, ...
                                                                'AveragePathGains', avgPathGains, ...
                                                                'NormalizePathGains', true,...
                                                                'FadingDistribution', 'Rayleigh',... % KFactor, DirectPathDopplerShift, DirectPathInitialPhase
                                                                'MaximumDopplerShift', obj.r_max_doppler, ...
                                                                'DopplerSpectrum', doppler('Jakes'),...
                                                                'SpatialCorrelationSpecification', 'Separate Tx Rx',... %'NumTransmitAntennas', obj.N_TX, 'NumReceiveAntennas', obj.N_RX,...
                                                                'TransmitCorrelationMatrix', eye(obj.N_TX),...
                                                                'ReceiveCorrelationMatrix', eye(obj.N_RX),... % SpatialCorrelationMatrix
                                                                'AntennaSelection', 'off',...
                                                                'NormalizeChannelOutputs', false,...
                                                                'FadingTechnique', 'Sum of sinusoids', ...
                                                                'NumSinusoids', 48,...
                                                                'InitialTimeSource', 'Input Port',... % InitialTime
                                                                'RandomStream', 'Global stream',... % Seed
                                                                'PathGainsOutputPort', obj.r_gains_active,...
                                                                'Visualization', 'off'); %AntennaPairsToDisplay, PathsForDopplerDisplay, SamplesToDisplay

                elseif strcmp(obj.r_random_source,'local') == true

                    obj.r_matlab_MIMO_obj = comm.MIMOChannel(   'SampleRate', obj.r_samp_rate, ...
                                                                'PathDelays', pathDelays, ...
                                                                'AveragePathGains', avgPathGains, ...
                                                                'NormalizePathGains', true,...
                                                                'FadingDistribution', 'Rayleigh',... % KFactor, DirectPathDopplerShift, DirectPathInitialPhase
                                                                'MaximumDopplerShift', obj.r_max_doppler, ...
                                                                'DopplerSpectrum', 'Jakes',...
                                                                'SpatialCorrelationSpecification', 'Separate Tx Rx',... %'NumTransmitAntennas', obj.N_TX, 'NumReceiveAntennas', obj.N_RX,...
                                                                'TransmitCorrelationMatrix', eye(obj.N_TX),...
                                                                'ReceiveCorrelationMatrix', eye(obj.N_RX),... % SpatialCorrelationMatrix
                                                                'AntennaSelection', 'off',...
                                                                'NormalizeChannelOutputs', false,...
                                                                'FadingTechnique', 'Sum of sinusoids', ...
                                                                'NumSinusoids', 48,...
                                                                'InitialTimeSource', 'Input Port',... % InitialTime
                                                                'RandomStream', 'mt19937ar with seed',...
                                                                'Seed', obj.r_seed,...
                                                                'PathGainsOutputPort', obj.r_gains_active,...
                                                                'Visualization', 'off'); %AntennaPairsToDisplay, PathsForDopplerDisplay, SamplesToDisplay

                else
                    error('Unknown randomn source %s.', obj.r_random_source);
                end
                
            elseif strcmp(obj.type,'rician') == true
                
                % sanity check
                if strcmp(obj.r_type, 'TDL-iv') == false && ...
                        strcmp(obj.r_type, 'TDL-v') == false && ...
                        strcmp(obj.r_type, 'InH LOS') == false && ...
                        strcmp(obj.r_type, 'UMi LOS') == false
                        
                    error('This is not a rician fading channel: %s.', obj.r_type);
                    
                end
                
                if strcmp(obj.r_random_source,'global') == true
                    obj.r_matlab_MIMO_obj = comm.MIMOChannel(   'SampleRate', obj.r_samp_rate, ...
                                                                'PathDelays', pathDelays, ...
                                                                'AveragePathGains', avgPathGains, ...
                                                                'NormalizePathGains', true,...
                                                                'FadingDistribution', 'Rician',...
                                                                'KFactor', obj.r_K,...
                                                                'DirectPathDopplerShift',obj.r_max_doppler*0.7,...
                                                                'DirectPathInitialPhase',0,...
                                                                'MaximumDopplerShift', obj.r_max_doppler, ...
                                                                'DopplerSpectrum', doppler('Jakes'),...
                                                                'SpatialCorrelationSpecification', 'Separate Tx Rx',... %'NumTransmitAntennas', obj.N_TX, 'NumReceiveAntennas', obj.N_RX,...
                                                                'TransmitCorrelationMatrix', eye(obj.N_TX),...
                                                                'ReceiveCorrelationMatrix', eye(obj.N_RX),... % SpatialCorrelationMatrix
                                                                'AntennaSelection', 'off',...
                                                                'NormalizeChannelOutputs', false,...
                                                                'FadingTechnique', 'Sum of sinusoids', ...
                                                                'NumSinusoids', 48,...
                                                                'InitialTimeSource', 'Input Port',... % InitialTime
                                                                'RandomStream', 'Global stream',... % Seed
                                                                'PathGainsOutputPort', obj.r_gains_active,...
                                                                'Visualization', 'off'); %AntennaPairsToDisplay, PathsForDopplerDisplay, SamplesToDisplay

                elseif strcmp(obj.r_random_source,'local') == true

                    obj.r_matlab_MIMO_obj = comm.MIMOChannel(   'SampleRate', obj.r_samp_rate, ...
                                                                'PathDelays', pathDelays, ...
                                                                'AveragePathGains', avgPathGains, ...
                                                                'NormalizePathGains', true,...
                                                                'FadingDistribution', 'Rician',...
                                                                'KFactor', obj.r_K,...
                                                                'DirectPathDopplerShift',obj.r_max_doppler*0.7,...
                                                                'DirectPathInitialPhase',0,...
                                                                'MaximumDopplerShift', obj.r_max_doppler, ...
                                                                'DopplerSpectrum', 'Jakes',...
                                                                'SpatialCorrelationSpecification', 'Separate Tx Rx',... %'NumTransmitAntennas', obj.N_TX, 'NumReceiveAntennas', obj.N_RX,...
                                                                'TransmitCorrelationMatrix', eye(obj.N_TX),...
                                                                'ReceiveCorrelationMatrix', eye(obj.N_RX),... % SpatialCorrelationMatrix
                                                                'AntennaSelection', 'off',...
                                                                'NormalizeChannelOutputs', false,...
                                                                'FadingTechnique', 'Sum of sinusoids', ...
                                                                'NumSinusoids', 48,...
                                                                'InitialTimeSource', 'Input Port',... % InitialTime
                                                                'RandomStream', 'mt19937ar with seed',...
                                                                'Seed', obj.r_seed,...
                                                                'PathGainsOutputPort', obj.r_gains_active,...
                                                                'Visualization', 'off'); %AntennaPairsToDisplay, PathsForDopplerDisplay, SamplesToDisplay

                else
                    error('Unknown randomn source %s.', obj.r_random_source);
                end
            end
        end
        
        function [samples_antenna_rx] = pass_samples(obj, samples_antenna_tx, channel_time_in_seconds)
            
            if nargin < 3
                error('Incorrect number of inputs. We need a sample time.');
            end
            
            [n_samples_tx, N_TX_check] = size(samples_antenna_tx);            
            
            % sanity check
            if obj.N_TX ~= N_TX_check
                error('Expect %d tx antennas, received %d.', obj.N_TX, N_TX_check);
            end
            
            % first adjust the amplitude of the samples, same for each channel model
            samples_antenna_tx = obj.amp*samples_antenna_tx;
            
            if strcmp(obj.type, 'awgn')
                
                samples_antenna_rx = zeros(obj.a_sto + n_samples_tx + obj.a_sto, 1);
                
                % each rx receives all 'distorted' tx
                for i=1:1:obj.N_TX
                    samples_antenna_rx = samples_antenna_rx + lib_ch.err_phase_cfo_sto(samples_antenna_tx(:,i), obj.a_err_phase, obj.a_cfo, obj.a_sto);
                end
                samples_antenna_rx = repmat(samples_antenna_rx, 1, obj.N_RX);
                
            elseif strcmp(obj.type, 'rayleigh') == true || strcmp(obj.type, 'rician') == true

                % add sto and thereby desynchronize signal
                if obj.r_sto >= 0
                    samples_antenna_rx = [zeros(obj.r_sto, obj.N_TX); samples_antenna_tx; zeros(obj.r_sto, obj.N_TX)];
                else
                    error('STO must be positive or zero, is %d.', sto);
                end 
                                
                % this can be very time consuming
                if obj.r_gains_active == true
                    [samples_antenna_rx, obj.r_gains] = obj.r_matlab_MIMO_obj(samples_antenna_rx, channel_time_in_seconds);
                else
                    samples_antenna_rx = obj.r_matlab_MIMO_obj(samples_antenna_rx, channel_time_in_seconds);
                end

                % the received signal is downconverted, which creates a phase coherent CFO usually much larger than Doppler
                if obj.r_cfo ~= 0

                    n_samples_per_antenna = numel(samples_antenna_rx(:,1));

                    time_base = 0:(n_samples_per_antenna-1);
                    time_base = time_base';

                    for i=1:1:obj.N_RX
                        samples_antenna_rx(:,i) = samples_antenna_rx(:,i).*exp(1i*2*pi*obj.r_cfo*time_base);
                    end
                end
                
                % add error phase
                if obj.r_err_phase ~= 0
                    samples_antenna_rx = exp(1i*obj.r_err_phase)*samples_antenna_rx;
                end
            else
                error('Channel neither awgn, nor rayleigh, nor rician, but %s.', obj.type);
            end
            
            % save signal without noise
            obj.samples_antenna_rx_no_noise = samples_antenna_rx;
            
            % final step is to add noise to each rx antenna
            if obj.noise == true
                if strcmp(obj.awgn_random_source,'global') == true
                    for i=1:1:obj.N_RX
                        samples_antenna_rx(:,i) = awgn(samples_antenna_rx(:,i), obj.snr_db, pow2db(1/obj.spectrum_occupied));
                    end
                elseif strcmp(obj.awgn_random_source,'local') == true
                    for i=1:1:obj.N_RX
                        samples_antenna_rx(:,i) = awgn(samples_antenna_rx(:,i), obj.snr_db, pow2db(1/obj.spectrum_occupied), obj.awgn_randomstream);
                    end
                end
            end
            
            % save only the noise
            obj.samples_antenna_rx_only_noise = samples_antenna_rx - obj.samples_antenna_rx_no_noise;
        end
        
        function [] = reset_random_rayleigh_rician(obj)
            if strcmp(obj.type,'rayleigh') == true || strcmp(obj.type,'rician') == true
                obj.r_matlab_MIMO_obj.reset();
            end
        end

        function [] = reset_random_awgn(obj)
            if strcmp(obj.awgn_random_source, 'local') == true
                obj.awgn_randomstream.reset();
            end
        end
    end
end
