function [result] = test_channel_coding_pdc(tx_config)
    % determine valid DECT NR+ packet size
    phy_4_5 = lib_types.run_clause_4_5(tx_config);

    % generate random bits
    tb_bits = randi([0 1], phy_4_5.N_TB_bits, 1);

    % encode PDC
    [x_PDC, ~] = lib_7_transmission_encoding.PDC_encoding(tb_bits, ...
                                                                    phy_4_5.G, ...
                                                                    tx_config.Z, ...
                                                                    tx_config.network_id, ...
                                                                    tx_config.PLCF_type, ...
                                                                    tx_config.rv, ...
                                                                    phy_4_5.mcs, ...
                                                                    phy_4_5.tm_mode.N_SS);

    % simulate without HARQ
    HARQ_buf_ = [];

    % decode PDC
    [tb_bits_recovered, ~, ~] = lib_7_transmission_encoding.PDC_decoding(x_PDC, ...
                                                                         phy_4_5.N_TB_bits, ...
                                                                         tx_config.Z, ...
                                                                         tx_config.network_id, ...
                                                                         tx_config.PLCF_type, ...
                                                                         tx_config.rv, ...
                                                                         phy_4_5.mcs, ...
                                                                         phy_4_5.tm_mode.N_SS, ...
                                                                         HARQ_buf_);

    % analyze result
    result.n_bit_errors = sum(abs(tb_bits - double(tb_bits_recovered)));
    result.BER = result.n_bit_errors / phy_4_5.N_TB_bits;
end