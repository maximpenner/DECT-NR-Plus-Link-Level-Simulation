function [weights_all_ts] = weights(physical_resource_mapping_DRS_cell, ...
                                    N_closest_DRS_pilots, ...
                                    N_b_DFT, ...
                                    N_PACKET_symb, ...
                                    N_b_CP, ...
                                    samp_rate, ...
                                    noise_estim, ...
                                    f_d_hertz, ...
                                    tau_rms_sec)
    % how many transmit antennas do we have?
    N_TS = size(physical_resource_mapping_DRS_cell,1);
    
    % how many pilots do we have for each transmit stream?
    N_p = numel(cell2mat(physical_resource_mapping_DRS_cell(1, end)));
    
    % how many of those pilots do we actually use?
    N_p_used = min(N_p, N_closest_DRS_pilots);
    
    % return value: we save weights for each transmit stream
    weights_all_ts = cell(N_TS,1);
    
    % go over each transmit stream as each transmit stream uses different pilots
    for tx_idx = 1:1:N_TS
        
        % get linear indices of all pilots for this transmit stream
        linear_indices_matlab = cell2mat(physical_resource_mapping_DRS_cell(tx_idx, end));
        linear_indices_matlab = reshape(linear_indices_matlab,[],1);

        % convert linear indices to x and y coordinates
        [y_p, x_p] = ind2sub([N_b_DFT N_PACKET_symb], linear_indices_matlab);

        assert(N_p == numel(x_p));
        assert(N_p == numel(y_p));

        % calculate weights across the entire time frequency lattice
        weights_all_ts(tx_idx) = {dectnrp_rx.channel_estimation.wiener(N_b_DFT, ...
                                                                       N_PACKET_symb, ...
                                                                       N_b_CP, ...
                                                                       N_p_used, ...
                                                                       x_p, ...
                                                                       y_p, ...
                                                                       samp_rate, ...
                                                                       noise_estim, ...
                                                                       f_d_hertz, ...
                                                                       tau_rms_sec)};
    end 
end
